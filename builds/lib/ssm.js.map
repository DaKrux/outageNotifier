{"version":3,"sources":["../../src/lib/ssm.js"],"names":["WithDecryption","getSecret","Name","ssm","AWS","SSM","result","getParameter","promise","Parameter","Value","Error","e"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,cAAc,GAAG,IAAvB;;AAEO,eAAeC,SAAf,CAAyBC,IAAzB,EAA+B;AACpC,MAAI;AACF,UAAMC,GAAG,GAAG,IAAIC,gBAAIC,GAAR,EAAZ;AACA,UAAMC,MAAM,GAAG,MAAMH,GAAG,CAACI,YAAJ,CAAiB;AAACL,MAAAA,IAAD;AAAOF,MAAAA;AAAP,KAAjB,EAAyCQ,OAAzC,EAArB;AAEA,UAAM;AAACC,MAAAA;AAAD,QAAcH,MAApB;AACA,UAAM;AAACI,MAAAA;AAAD,QAAUD,SAAhB;AAEA,QAAI,CAACC,KAAL,EACE,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AAEF,WAAOD,KAAP;AACD,GAXD,CAWE,OAAOE,CAAP,EAAU;AACV,UAAM,IAAID,KAAJ,CAAW,sBAAqBT,IAAK,cAAaU,CAAE,EAApD,CAAN;AACD;AACF","sourcesContent":["import AWS from 'aws-sdk'\n\nconst WithDecryption = true\n\nexport async function getSecret(Name) {\n  try {\n    const ssm = new AWS.SSM()\n    const result = await ssm.getParameter({Name, WithDecryption}).promise()\n\n    const {Parameter} = result\n    const {Value} = Parameter\n\n    if (!Value)\n      throw new Error('Empty SSM Value')\n\n    return Value\n  } catch (e) {\n    throw new Error(`Could not retrieve ${Name} from SSM\\n${e}`)\n  }\n}\n"],"file":"ssm.js"}